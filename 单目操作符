////单目操作符：
////int main()
////{
//	//a+b
//	//+双目操作符
//	//单目操作符
//	//只有一个操作数
//	//！-- 逻辑反操作
//	//- -- 负值
//	//+ -- 正值
//	//& -- 取地址
//	//sizeof -- 操作数的类型长度（字节为单位）
//	//~ -- 对一个数的二进制按位取反
//	//-- -- 前置or后置--
//	//++ -- 前置or后置++
//	//* -- 简介访问操作符（解引用操作符）
//	//(类型) -- 强制类型转换
////	int a = 0;
////	printf("%d\n", !a);
////	if (!a)
////	{
////		printf("呵呵\n");
////	}
////	return 0;
////}
////int main()
////{
////	int a = -5;
////	a = -a;
////
////	return 0;
////}
//int main()
//{
//	int a = 10;
//	char c = 'r';
//	char* p = &c;
//	int arr[10] = { 0 };
//	printf("%d\n", sizeof a);
//	printf("%d\n", sizeof(int));
//
//	printf("%d\n", sizeof(c));
//	printf("%d\n", sizeof(char));
//
//	printf("%d\n", sizeof(p));
//	printf("%d\n", sizeof(char*));
//
//	printf("%d\n", sizeof(arr));
//	printf("%d\n",sizeof(int [10]));
//	//*p = 20;
//	//char*
//	//printf("%p")
//	return 0;
//}
//int main()
//{
//	short s = 0;
//	int a = 5;
//	printf("%d\n", sizeof(s=a+5));//由于s是短整型，所以不管右边怎么加，都得按s的规则存储，只能存两个字节，右边相当于摆设，不参与运算
//	printf("%d\n", s);//0
//	//int a = 0;
//	//char b = 'w';
//	//int arr[10] = { 0 };
//	//printf("%d\n", sizeof(a));
//	//printf("%d\n", sizeof);
//
//	return 0;
//}
//int main()
//{
//	int a = 11;
//	a = a | (1 << 2);
//	printf("%d\n", a);
//	a = a & (~(1 << 2));
//	printf("%d\n", a);
//	//0000000000000000000000000000001011
//	//0000000000000000000000000000000001
//	//1<<2
//	//0000000000000000000000000000000100
//	//0000000000000000000000000000001111
//	// 变回去
//	// &0100
//	// 
//	//int a = 0;
//	////~按（二进制）位取反
//	////00000000000000000000000000000000 -- 正数在内存中存储的补码跟原码相同
//	////11111111111111111111111111111111 -- 按位取反得到补码（内存中）
//	////11111111111111111111111111111110 -- 补码-1 --得到反码
//	////10000000000000000000000000000001 -- 符号位不变其他按位取反 -- 得到原码
//	//int b = ~a;
//	//printf("%d\n", b);
//	return 0;
//}
//int main()
//{
//	int a = 10;
//	printf("%d\n", ++a);//先++后使用
//	printf("%d\n", a++);//先使用后++
//	return 0;
//}
//int main()
//{
//	//int a = 3.14;
//	int a = (int)3.14;
//	return 0;
//}
